#define _CRT_SECURE_NO_WARNINGS 1
//#include <stdio.h>
//int main()
//{
//    printf("********\n");
//    printf("************\n");
//    printf("####....#.\n");
//    printf("#..###.....##....\n");
//    printf("###.......######              ###            ###\n");
//    printf("...........               #...#          #...#\n");
//    printf(" ##*#######                 #.#.#          #.#.#\n");
//    printf("####*******######             #.#.#          #.#.#\n");
//    printf("...#***.****.*###....          #...#          #...#\n");
//    printf("....**********##.....           ###            ###\n");
//    printf("....****    *****....\n");
//    printf("####        ####\n");
//    printf("######        ######\n");
//    printf("##############################################################\n");
//    printf("#...#......#.##...#......#.##...#......#.##------------------#\n");
//    printf("###########################################------------------#\n");
//    printf("#..#....#....##..#....#....##..#....#....#####################\n");
//    printf("##########################################    #----------#\n");
//    printf("#.....#......##.....#......##.....#......#    #----------#\n");
//    printf("##########################################    #----------#\n");
//    printf("#.#..#....#..##.#..#....#..##.#..#....#..#    #----------#\n");
//    printf("##########################################    ############\n");
//    return 0;
//}


//break和continue在for循环中的使用
// bu不可在for循环体内修改循环变量，防止for循环失去控制
// 建议for语句的循环控制变量的取值采用“前必后开区间”写法
//#include <stdio.h>
//int main()
//{
//	int i = 0;
//	for (i = 1; i <= 10; i++)
//	{
//		if (i == 5)
//			//break;
//			continue;
//		printf("%d ", i);
//	}
//	return 0;
//}

//#include <stdio.h>
//int main()
//{
//	int i = 1;//初始化
//
//	while (i <= 10)//判断
//	{
//		if (i == 5)
//			continue;
//		printf("%d ", i);
//		i++;//调整
//	}
//	return 0;
//}

//#include <stdio.h>
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//
//	return 0;
//}

//变种1
//for循环的初始化，调整，判断都可以省略，但是，for循环的判断部分如果被省略，那判断条件就恒为真
//如果不是非常熟练，那就不要随便省略相关代码  
//#include <stdio.h>
//int main()
//{
//	for (;;)
//	{
//		printf("hehe\n");
//	}
//	return 0;
//}

//#include <stdio.h>
//int main()
//{
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		int j = 0;
//		for(j=0;j<10;j++)
//		{
//			printf("hehe\n");
//
//		}
//
//	}//就会打印100次
//	//如果省略初始化（i=0和j=0),会打印10次
//	return 0;
//}


//#include <stdio.h>
//int main()
//{
//	int x, y;
//	for (x = 0, y = 0; x < 2 && y < 5; ++x, y++)
//	{
//		printf("hehe\n");
//	}
//	return 0;
//}




//do...while（）循环
//do
//    循环语句
//while（表达式）
//#include <stdio.h>
//int main()
//{
//	int i = 1;
//	do
//	{
//		/*if (i == 5)
//			break;*/
//		printf("%d ", i);
//		i++;
//	}
//	while (i<=10);
//	return 0;
//}

//计算n的阶乘
/*#include <stdio.h>
int main()
{
	int i = 0;
	int n = 0;
	int ret = 1;
	scanf("%d", &n);
	for (i = 1; i <= n; i++)
	{
		ret = ret * i;

	}
	printf("ret=%d\n", ret);
	return 0;
} */ 



//#include <stdio.h>
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int k = 7;//写一个代码在arr数组（有序的）中找到7
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	for (i = 0; i < sz; i++)
//	{
//		if (k == arr[i])
//		{
//			printf("找到了，下标是%d\n", i);
//			break;
//		}
//
//	}
//	if (i == sz)
//		printf("找不到\n");
//	return 0;
//}




//折半查找算法/二分查找算法
//写一个代码在arr数组（有序的）中找到7
//#include <stdio.h>
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int k = 7;
//	int sz = sizeof(arr) / sizeof(arr[0]);//计算元素个数
//	int left = 0;//左下标
//	int right = sz - 1;//右下标
//	while (left <= right)
//	{
//		int mid = (left + right) / 2;
//		if (arr[mid] > k)
//		{
//
//			right = mid - 1;
//		}
//		else if (arr[mid] < k)
//		{
//			left = mid + 1;
//		}
//		else
//		{
//			printf("找到了，下标是%d\n", mid);
//			break;
//		}
//	}
//	if (left > right)
//	{
//		
//		printf("找不到\n");
//	}
//	return 0;
//}



//编写代码，使两边的字符向中间移动
//#include <stdio.h>
//#include <string.h>
//#include <windows.h>
//int main()
//{
//	char arr1[] = "welcome";
//	char arr2[] = "#######";
//	int left = 0;
//	//int right = sizeof(arr1) / sizeof(arr1[0]) - 2;
//	int right = strlen(arr1)-1;
//	while (left<=right)
//	{
//		arr2[left] = arr1[left];
//		arr2[right] = arr1[right];
//		printf("%s\n", arr2);
//		Sleep(1000);//每隔一秒打印，单位是毫秒
//		system("cls");//执行系统命令的一个函数-cls-清空屏幕
//		left++;
//		right--;
//	}
//	printf("%s\n", arr2);
//	return 0;
//}

//编写代码实现模拟用户登陆情景，并且只能登陆三次
#include <stdio.h>
#include<string.h>
#include <stdlib.h>
#include<windows.h>
int main()
{
	int i = 0;
	char password[20] = { 0 };
	for (i = 0; i < 3; i++)
	{
		printf("请输入密码：>");
		scanf("%s", password);
		if（strcmp(password ,"123456")==0)//==不能用来比较两个字符串是否相等，应该使用一个库函数-strcmp
		{
			printf("登陆成功\n");
			break;
		}
		else
		{
			printf("密码错误\n");
			}
	}
	if (i == 3)
		printf("三次密码均错误，退出程序\n");
	return 0;
}
